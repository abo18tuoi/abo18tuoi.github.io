{"version":3,"sources":["../file:/Users/fe-bao/TestSpine/assets/file:/Users/fe-bao/TestSpine/assets/DragNode.ts","../file:/Users/fe-bao/TestSpine/assets/file:/Users/fe-bao/TestSpine/assets/Moving.ts","../file:/Users/fe-bao/TestSpine/assets/file:/Users/fe-bao/TestSpine/assets/ScaleNode.ts","../file:/Users/fe-bao/TestSpine/assets/file:/Users/fe-bao/TestSpine/assets/SpineController.ts","../file:/Users/fe-bao/TestSpine/assets/file:/Users/fe-bao/TestSpine/assets/SpineTest.ts","../file:/Users/fe-bao/TestSpine/assets/file:/Users/fe-bao/TestSpine/assets/TimeScaleSlider.ts"],"names":["ccclass","_decorator","property","DragNode","_dec","_dec2","Node","_class","_class2","_Component","_inheritsLoose","_this","_len","arguments","length","args","Array","_key","call","apply","concat","_initializerDefineProperty","_descriptor","_assertThisInitialized","_isDragging","_offset","v3","_proto","prototype","onLoad","targetNode","on","EventType","TOUCH_START","onTouchStart","TOUCH_MOVE","onTouchMove","TOUCH_END","onTouchEnd","TOUCH_CANCEL","event","touch","set","getUILocation","x","position","y","Component","_applyDecoratedDescriptor","configurable","enumerable","writable","initializer","_RF","pop","Moving","_tween","_speed","onEnable","move","onDisable","stop","spine","node","getComponent","sp","Skeleton","clearAnimation","_this2","randomPosition","Vec3","Math","random","duration","distance","tween","to","onUpdate","direction","clone","subtract","normalize","angle","atan2","PI","onComplete","start","MIN_SCALE","MAX_SCALE","ScaleNode","_dec3","Slider","_dec4","Label","_descriptor2","_descriptor3","slider","progress","update","deltaTime","isValid","target","value","snapValue","setScale","label","string","toFixed","scale","snap","round","SpineController","Prefab","_dec5","Toggle","_dec6","_descriptor4","_descriptor5","setEventListener","onSpineEvent","bind","window","assetManager","resources","loadDir","err","assets","warn","filter","data","SkeletonData","createListSpines","skeData","_this3","containerSpine","removeAllChildren","_loop","_step","btn","instantiate","btnPlayAnim","getComponentInChildren","name","parent","skeletonData","createListAnims","_iterator","_createForOfIteratorHelperLoose","done","_this4","container","anims","getAnimsEnum","_loop2","anim","setAnimation","toggleLoop","isChecked","getAnimationDuration","console","log","animation","_skeletonCache","animations","find","e","trackEntry","clearTracks","SpineTest","EditBox","pool","NodePool","listSpine","spineBoss","delayTime","editBox","enabled","editBoxIncreaseByTime","editBoxMax","loadListSpine","dt","addByNumber","parseInt","includes","add","count","i","children","MaxSpineCount","get","prefab","active","setParent","setPosition","spineData","tryPlayAnimation","remove","put","hasAnimation","_i","_anims","message","lblCount","VERSION","_createClass","key","error","TimeScaleSlider","_ScaleNode","timeScale"],"mappings":"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","file":"all.js","sourcesContent":["import { Component, _decorator, Node, v3, Button } from \"cc\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"DragNode\")\nexport class DragNode extends Component {\n    @property(Node) targetNode: Node = null;\n\n    private _isDragging = false;\n    private _offset = v3();\n\n    protected onLoad() {\n        this.targetNode.on(Node.EventType.TOUCH_START, this.onTouchStart, this);\n        this.targetNode.on(Node.EventType.TOUCH_MOVE, this.onTouchMove, this);\n        this.targetNode.on(Node.EventType.TOUCH_END, this.onTouchEnd, this);\n        this.targetNode.on(Node.EventType.TOUCH_CANCEL, this.onTouchEnd, this);\n    }\n\n    private onTouchStart(event) {\n        this._isDragging = true;\n        const touch = event.touch;\n        this._offset.set(touch.getUILocation().x - this.targetNode.position.x, touch.getUILocation().y - this.targetNode.position.y);\n    }\n\n    private onTouchMove(event) {\n        if (!this._isDragging) return;\n        const touch = event.touch;\n        this.targetNode.position = v3(touch.getUILocation().x - this._offset.x, touch.getUILocation().y - this._offset.y);\n    }\n\n    private onTouchEnd() {\n        this._isDragging = false;\n    }\n}","import { Component, Tween, Vec3, _decorator, tween, Node, sp } from \"cc\";\n\nconst { ccclass, property } = _decorator;\n\n@ccclass(\"Moving\")\nexport class Moving extends Component {\n    private _tween: Tween<Node> = null;\n    private _speed: number = 100;\n\n    protected onEnable(): void {\n        this.move();\n    }\n\n    protected onDisable(): void {\n        this.stop();\n        const spine = this.node.getComponent(sp.Skeleton);\n        if (spine) {\n            spine.clearAnimation();\n        }\n    }\n\n    private move() {\n        this.stop();\n        const randomPosition = new Vec3(Math.random() * 1000 - 500, Math.random() * 1000 - 500, 0);\n        const duration = Vec3.distance(this.node.position, randomPosition) / this._speed;\n        this._tween = tween(this.node).to(duration, { position: randomPosition }, {\n            onUpdate: () => {\n                //update angle follow the direction\n                const direction = randomPosition.clone().subtract(this.node.position).normalize();\n                this.node.angle = Math.atan2(direction.y, direction.x) * 180 / Math.PI;\n            },\n            onComplete: () => {\n                this.move();\n            }\n        }).start();\n    }\n\n    private stop() {\n        if (this._tween) {\n            this._tween.stop();\n            this._tween = null;\n        }\n    }\n}","import { _decorator, Component, isValid, Label, Node, Slider, v3 } from 'cc';\nconst { ccclass, property } = _decorator;\n\nconst MIN_SCALE = 0;\nconst MAX_SCALE = 2;\n\n@ccclass('ScaleNode')\nexport class ScaleNode extends Component {\n    @property(Node) target: Node = null;\n    @property(Slider) slider: Slider = null;\n    @property(Label) label: Label = null;\n\n    protected start(): void {\n        this.slider.progress = 0.5;\n    }\n\n    update(deltaTime: number) {\n        if (isValid(this.target)) {\n            const value = this.snapValue();\n            this.setScale(value);\n            this.label.string = value.toFixed(2);\n        }\n    }\n\n    setScale(value: number) {\n        this.target.scale = v3(value, value);\n    }\n\n    snapValue(): number {\n        // snap progress value\n        const value = this.slider.progress * (MAX_SCALE - MIN_SCALE) + MIN_SCALE;\n        const snap = 0.01;\n        return Math.round(value / snap) * snap;\n    }\n}\n\n","import { _decorator, assetManager, Component, instantiate, Label, Node, Prefab, sp, Toggle, warn } from 'cc';\nconst { ccclass, property } = _decorator;\n\n@ccclass('SpineController')\nexport class SpineController extends Component {\n    @property(sp.Skeleton) spine: sp.Skeleton = null;\n    @property(Prefab) btnPlayAnim: Prefab = null;\n    @property(Node) container: Node = null;\n    @property(Toggle) toggleLoop: Toggle = null;\n\n    @property(Node) containerSpine: Node = null;\n\n    protected onLoad(): void {\n        this.spine.setEventListener(this.onSpineEvent.bind(this));\n        window['sp'] = this.spine;\n\n        assetManager.resources.loadDir<sp.SkeletonData>('', (err, assets: sp.SkeletonData[]) => {\n            if (err) {\n                warn(err);\n                return;\n            }\n            if (assets.length == 0) {\n                warn('No spine data found');\n                return;\n            }\n            assets = assets.filter((data) => data instanceof sp.SkeletonData);\n            this.createListSpines(assets);\n        });\n    }\n\n    createListSpines(skeData: sp.SkeletonData[]) {\n        this.containerSpine.removeAllChildren();\n        if (skeData.length == 0) return;\n        for (const data of skeData) {\n            const btn = instantiate(this.btnPlayAnim);\n            btn.getComponentInChildren(Label).string = data.name;\n            btn.parent = this.containerSpine;\n            btn.on(Node.EventType.TOUCH_END, () => {\n                this.spine.skeletonData = data;\n                this.createListAnims();\n            });\n        }\n\n        this.spine.skeletonData = skeData[0];\n        this.createListAnims();\n    }\n\n    createListAnims() {\n        this.container.removeAllChildren();\n        const anims = this.spine.skeletonData.getAnimsEnum();\n        for (const anim in anims) {\n            if (anim == '<None>') continue;\n            const btn = instantiate(this.btnPlayAnim);\n            btn.getComponentInChildren(Label).string = anim;\n            btn.parent = this.container;\n            btn.on(Node.EventType.TOUCH_END, () => {\n                this.spine.setAnimation(0, anim, this.toggleLoop.isChecked);\n                const duration = this.getAnimationDuration(this.spine, anim);\n                console.log(`Play animation ${anim} with duration ${duration}`);\n            });\n        }\n    }\n\n    getAnimationDuration(spine: any , name: string) {\n        let animation = spine.skeletonData._skeletonCache.animations.find((e) => e.name == name);\n        return animation.duration;\n    }\n\n    onSpineEvent(trackEntry, event) {\n        console.log('onSpineEvent', event.data.name);\n    }\n\n    stop() {\n        this.spine.clearTracks();\n    }\n\n}\n\n","import { _decorator, assetManager, Component, EditBox, instantiate, Label, Node, NodePool, Prefab, sp, VERSION, UITransform, Vec3, view, warn, v3 } from 'cc';\nconst { ccclass, property } = _decorator;\n\n\n@ccclass('SpineTest')\nexport class SpineTest extends Component {\n    @property(Prefab)\n    prefab: Prefab = null;\n\n    @property(Label) lblCount: Label = null;\n    @property(EditBox) editBox: EditBox = null;\n    @property(EditBox) editBoxIncreaseByTime: EditBox = null;\n    @property(EditBox) editBoxMax: EditBox = null;\n\n    pool: NodePool = new NodePool();\n    listSpine: sp.SkeletonData[] = [];\n    spineBoss: sp.SkeletonData = null;\n    delayTime: number = 0;\n\n    get MaxSpineCount() {\n        try {\n            return parseInt(this.editBoxMax.string);\n        } catch (error) {\n            return 2000;\n        }\n    }\n\n    protected onLoad(): void {\n        this.editBox.enabled = false;\n        this.editBoxIncreaseByTime.enabled = false;\n        this.editBoxMax.enabled = false;\n        this.loadListSpine();\n    }\n\n    protected update(dt: number): void {\n        this.delayTime += dt;\n        if (this.delayTime >= 1) {\n            this.delayTime = 0;\n            this.addByNumber(parseInt(this.editBoxIncreaseByTime.string));\n        }\n    }\n\n\n    loadListSpine() {\n        this.log('Loading spine data...');\n        assetManager.resources.loadDir<sp.SkeletonData>('', (err, assets: sp.SkeletonData[]) => {\n            if (err) {\n                this.log(`Error loading spine data: ${err}`);\n                return;\n            }\n            if (assets.length == 0) {\n                this.log('No spine data found');\n                return;\n            }\n            assets = assets.filter((data) => data instanceof sp.SkeletonData);\n            this.listSpine = assets.filter((data) => data.name.includes('fish') || data.name.includes('boss'));\n            this.spineBoss = assets.find((data) => data.name.includes('boss'));\n            this.editBox.enabled = true;\n            this.editBoxIncreaseByTime.enabled = true;\n            this.editBoxMax.enabled = true;\n            this.editBox.string = '100';\n            this.editBoxIncreaseByTime.string = '0';\n            this.editBoxMax.string = '2000';\n            this.add();\n            this.log(`Spine data loaded`);\n        });\n    }\n\n    add() {\n        if (!this.listSpine || this.listSpine.length == 0) return;\n        const count = parseInt(this.editBox.string);\n        this.addByNumber(count);\n    }\n\n    addByNumber(count: number) {\n        for (let i = 0; i < count; i++) {\n            if (this.node.children.length >= this.MaxSpineCount) break;\n            let node = this.pool.get();\n            if (!node) {\n                node = instantiate(this.prefab);\n            }\n            node.active = true;\n            node.setParent(this.node);\n            node.setPosition(v3(0, 0, 0));\n            const spine = node.getComponent(sp.Skeleton);\n            spine.clearAnimation();\n            spine.skeletonData = this.spineData();\n            this.tryPlayAnimation(spine);\n        }\n        this.log(`Spine Count: ${this.node.children.length}`);\n    }\n\n    remove() {\n        let count = parseInt(this.editBox.string);\n        while (count > 0 && this.node.children.length > 0) {\n            const node = this.node.children[0];\n            if (node) {\n                node.active = false;\n                this.pool.put(node);\n                count--;\n            }\n        }\n        this.log(`Spine Count: ${this.node.children.length}`);\n    }\n\n    spineData() {\n        return this.listSpine[this.node.children.length % this.listSpine.length];\n    }\n\n    hasAnimation(spine: any, name: string) {\n        if (!spine || !spine.skeletonData) {\n            return false;\n        }\n        let animation = spine.skeletonData._skeletonCache.animations.find((e) => e.name === name);\n        return animation != null;\n    }\n\n    tryPlayAnimation(spine: any) {\n        const anims = ['Walk', 'idle', 'animation'];\n        for (const anim of anims) {\n            if (this.hasAnimation(spine, anim)) {\n                spine.setAnimation(0, anim, true);\n                break;\n            }\n        }\n    }\n\n    log(message: string) {\n        this.lblCount.string = `Cocos Version: ${VERSION}\\nSpine Version: 4.2\\n${message}`;\n    }\n}","import { _decorator, Component, Node, sp } from 'cc';\nimport { ScaleNode } from './ScaleNode';\nconst { ccclass, property } = _decorator;\n\n@ccclass('TimeScaleSlider')\nexport class TimeScaleSlider extends ScaleNode {\n\n    spine: sp.Skeleton = null;\n\n    onLoad() {\n        this.spine = this.target.getComponent(sp.Skeleton);\n    }\n\n    setScale(value: number) {\n        this.spine.timeScale = value;\n    }\n\n}\n\n"]}